1) int x;
int y = 10;
int add(int a, int b) {
    return a + b;
}

int x = 42;
int y = x + 8;


2) int x = 0;
int y = 10;


while (x < 100) {
    x = x + 1;
}


3) int x = 10;
int y = 20;

if (x < y) {
    x = x + 1;
} else {
    y = y - 1;
}

4) 
int x = 10;
int y = 20;
int z = x + y * 2;

5)
int x = 0;

{
    int y = 10;
    x = x + y;
}

6)
int x = 5;

if (x > 0) {
    x = x - 1;
}

7) 
int x = 0;
int y = 10;

for (int a = 0; b < y; c++) {
    x = x + i;
}

while (x < 100) {
    x = x + 1;
}

8)
int add(int a, int b) {
    return a + b;
}

int result = add(10, 20);


9) 
int x = 0;

x++;
x--;


10) 
int x = 0;

while (x < 5) {
    x++;
}


11)

void print_hello() {
    return;
}

12)

const int MAX_COUNT = 5;

struct Point {
    int x;
    int y;

    void move(int dx, int dy) {
        x += dx;
        y += dy;
    }

    int getX() const {
        return x;   // <-- здесь было `j`, но должно быть `x`
    }

    int getY() const {
        return y;
    }
};

int factorial(int n) {
    int result = 1;
    for (int i = 1; i <= n; ++i) {
         result *= i;
     }
    return result;
}

int sumTo(int n) {
    int sum = 0;
    int i = 0;
    while (i <= n) {
         sum += i;
         i = i + 1;
     }
    return sum;
}

int countOnes(int n) {
    int count = 0;
    do {
         count = count + (n / 2);
        n = n / 2;
     } while (n > 0);
    return count;
}

int choose(int n, int k) {
    return (k > n) ? 0
                   : factorial(n) / (factorial(k) * factorial(n - k));
}

int main() {
    const int a = 3;
    int f = factorial(a);
    int s = sumTo(f);
    int c = countOnes(s);
    int ch = choose(5, 2);
    print(f);
    Point p;
    p.x = 1;
    p.y = 2;
    print(ch);
    p.move(3, 4);   // можно тоже раскомментировать, если нужно
    int px = p.getX();  // вернёт x
    int py = p.getY();

    return px + py + f + s + c + ch;
}
